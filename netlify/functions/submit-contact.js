export const config = { method: ["POST", "OPTIONS"] }; const r = new Map; const t = 6e4; const n = 5; function s(e) { return 'string' != typeof e ? e : e.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '').replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '').replace(/<object\b[^<]*(?:(?!<\/object>)<[^<]*)*<\/object>/gi, '').replace(/<embed\b[^<]*(?:(?!<\/embed>)<[^<]*)*<\/embed>/gi, '').replace(/javascript:/gi, '').replace(/on\w+\s*=/gi, '').trim() } function e(e) { const t = Date.now(), n = t - t; for (const [e, t] of r.entries()) { const e = t.filter(e => e > n); 0 === e.length ? r.delete(e) : r.set(e, e) } const e = r.get(e) || []; const t = e.filter(e => e > n); if (t.length >= n) return !1; t.push(t), r.set(e, t); return !0 } async function o(e, t) { if (!e || !t) return !1; try { const e = await fetch('https://www.google.com/recaptcha/api/siteverify', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: `secret=${t}&response=${e}` }); const t = await e.json(); return !0 === t.success } catch (e) { return console.error('CAPTCHA verification error:', e), !1 } } export default async function (e, t) { const n = { "Access-Control-Allow-Origin": "*", "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With", "Access-Control-Allow-Methods": "POST, OPTIONS", "Access-Control-Max-Age": "86400" }; if ("OPTIONS" === e.method) return new Response("", { status: 200, headers: n }); if ("POST" !== e.method) return new Response(JSON.stringify({ error: "Method not allowed" }), { status: 405, headers: n }); const o = process.env.NOTION_API_KEY, r = process.env.NOTION_DATABASE_ID, s = process.env.RECAPTCHA_SECRET_KEY; if (!o || !r) return new Response(JSON.stringify({ error: "Notion configuration missing. Please set NOTION_API_KEY and NOTION_DATABASE_ID environment variables." }), { status: 500, headers: n }); try { const a = e.headers.get('x-forwarded-for') || e.headers.get('x-real-ip') || t.clientContext?.identity?.url || 'unknown'; if (!e(a)) return new Response(JSON.stringify({ error: "Too many requests. Please wait before submitting again." }), { status: 429, headers: n }); const i = await e.json(); if (!i || 0 === Object.keys(i).length) return new Response(JSON.stringify({ error: "No form data received." }), { status: 400, headers: n }); if (i.captchaToken && s) { const e = await o(i.captchaToken, s); if (!e) return new Response(JSON.stringify({ error: "CAPTCHA verification failed. Please try again." }), { status: 400, headers: n }) } const c = {}; Object.entries(i).forEach(([e, t]) => { if ('captchaToken' !== e) 'string' == typeof t ? c[e] = s(t) : c[e] = t }); if (c.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(c.email)) return new Response(JSON.stringify({ error: "Invalid email format." }), { status: 400, headers: n }); const l = { "Status": { select: { name: "New" } }, "Date Received": { date: { start: new Date().toISOString() } } }; Object.entries(c).forEach(([e, t]) => { if (null !== t && void 0 !== t && '' !== t) switch (e) { case 'name': l["Name"] = { title: [{ text: { content: t } }] }; break; case 'email': l["Email"] = { email: t }; break; case 'phone': l["Phone"] = { phone_number: t }; break; case 'company': l["Company"] = { rich_text: [{ text: { content: t } }] }; break; case 'subject': l["Subject"] = { rich_text: [{ text: { content: t } }] }; break; case 'message': l["Message"] = { rich_text: [{ text: { content: t } }] }; break; case 'website': l["Website"] = { url: t }; break; case 'budget': l["Budget"] = { rich_text: [{ text: { content: t } }] }; break; case 'newsletter': l["Newsletter"] = { select: { name: t ? "Yes" : "No" } }; break; default: l[e.charAt(0).toUpperCase() + e.slice(1)] = { rich_text: [{ text: { content: String(t) } }] } } }); const u = { parent: { database_id: r }, properties: l }; const d = await fetch("https://api.notion.com/v1/pages", { method: "POST", headers: { Authorization: `Bearer ${o}`, "Notion-Version": "2022-06-28", "Content-Type": "application/json" }, body: JSON.stringify(u) }); if (!d.ok) { const e = await d.text(); let t; try { t = JSON.parse(e) } catch { t = { error: e } } return console.error("Notion API error:", t), new Response(JSON.stringify({ error: t.error || t.message || `Notion API error: ${d.status}` }), { status: d.status, headers: n }) } const p = await d.json(); return console.log("Contact form submitted successfully:", { ...c, notionPageId: p.id, clientIP: a }), new Response(JSON.stringify({ success: !0, message: "Contact form submitted successfully", pageId: p.id }), { status: 200, headers: n }) } catch (e) { return console.error("Contact form submission error:", e), new Response(JSON.stringify({ error: "Internal server error", details: e.message }), { status: 500, headers: n }) } }
